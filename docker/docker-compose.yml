# Local development setup with database
# For production, use the published Docker image with external database

services:
  # PostgreSQL Database (for local development only)
  postgres:
    image: postgres:15-alpine
    container_name: rabbitmq-admin-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rabbitmq_admin}
      POSTGRES_USER: ${POSTGRES_USER:-rabbitmq_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-rabbitmq_admin} -d ${POSTGRES_DB:-rabbitmq_admin}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Admin Application (local development build)
  app:
    image: rabbitmq-admin:latest
    container_name: rabbitmq-admin-app
    environment:
      # Database connection (points to local postgres service)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-rabbitmq_admin}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-rabbitmq_admin}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-password}

      # JWT configuration (change in production!)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key-change-in-production}

      # Audit configuration
      - AUDIT_WRITE_OPERATIONS_ENABLED=${AUDIT_WRITE_OPERATIONS_ENABLED:-true}
      - AUDIT_RETENTION_DAYS=${AUDIT_RETENTION_DAYS:-90}
      - AUDIT_BATCH_SIZE=${AUDIT_BATCH_SIZE:-100}
      - AUDIT_ASYNC_PROCESSING=${AUDIT_ASYNC_PROCESSING:-true}

      # Resource Management Configuration
      - RABBITMQ_ADMIN_RESOURCES_REFRESH_DEFAULT_INTERVAL=${RESOURCE_REFRESH_DEFAULT_INTERVAL:-30000}
      - RABBITMQ_ADMIN_RESOURCES_REFRESH_MIN_INTERVAL=${RESOURCE_REFRESH_MIN_INTERVAL:-15000}
      - RABBITMQ_ADMIN_RESOURCES_REFRESH_MAX_INTERVAL=${RESOURCE_REFRESH_MAX_INTERVAL:-300000}
      - RABBITMQ_ADMIN_RESOURCES_PAGINATION_DEFAULT_PAGE_SIZE=${RESOURCE_DEFAULT_PAGE_SIZE:-50}
      - RABBITMQ_ADMIN_RESOURCES_PAGINATION_MAX_PAGE_SIZE=${RESOURCE_MAX_PAGE_SIZE:-500}
      - RABBITMQ_ADMIN_RESOURCES_CACHE_ENABLED=${RESOURCE_CACHE_ENABLED:-true}
      - RABBITMQ_ADMIN_RESOURCES_CACHE_DEFAULT_TTL=${RESOURCE_CACHE_DEFAULT_TTL:-30000}
      - RABBITMQ_ADMIN_RESOURCES_CACHE_MAX_SIZE=${RESOURCE_CACHE_MAX_SIZE:-1000}
      - RABBITMQ_ADMIN_RESOURCES_RATE_LIMIT_REQUESTS_PER_MINUTE=${RESOURCE_RATE_LIMIT_RPM:-120}
      - RABBITMQ_ADMIN_RESOURCES_RATE_LIMIT_BURST_SIZE=${RESOURCE_RATE_LIMIT_BURST:-10}

      # Connection Pool Configuration for RabbitMQ API calls
      - RABBITMQ_ADMIN_RESOURCES_CONNECTION_POOL_MAX_TOTAL=${RESOURCE_POOL_MAX_TOTAL:-20}
      - RABBITMQ_ADMIN_RESOURCES_CONNECTION_POOL_MAX_PER_ROUTE=${RESOURCE_POOL_MAX_PER_ROUTE:-10}
      - RABBITMQ_ADMIN_RESOURCES_CONNECTION_POOL_CONNECTION_TIMEOUT=${RESOURCE_POOL_CONNECTION_TIMEOUT:-10000}
      - RABBITMQ_ADMIN_RESOURCES_CONNECTION_POOL_SOCKET_TIMEOUT=${RESOURCE_POOL_SOCKET_TIMEOUT:-30000}

      # Development profile
      - SPRING_PROFILES_ACTIVE=docker

    ports:
      - "${APP_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
