name: Build and Publish

on:
  # Run on pushes to main branch (direct pushes or merges)
  push:
    branches: [main]
    tags: ["v*"]
  # Run on pull requests targeting main branch
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  DOCKER_IMAGE_NAME: rabbitmq-admin
  JAVA_VERSION: 21
  NODE_VERSION: 20

jobs:
  # Test Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --force

      - name: Run frontend tests
        run: |
          cd frontend
          pnpm test -- --run --reporter=verbose

      - name: Start services for TestContainers
        run: |
          # Start Docker daemon
          sudo systemctl start docker
          sudo chmod 666 /var/run/docker.sock
          
          # Verify Docker is working
          docker info
          docker ps
          
          # Pre-pull required images to avoid timeouts
          docker pull postgres:15-alpine

      - name: Run tests (excluding integration tests)
        env:
          # JWT configuration for tests
          JWT_SECRET_KEY: test-secret-key-for-ci-cd-pipeline-only-must-be-at-least-256-bits-long
          # JVM options for tests
          MAVEN_OPTS: "-Xmx3072m -XX:+UseG1GC"
        run: |
          # Use CI profile to exclude integration tests
          mvn test -pl backend -Pci -Dspring.profiles.active=test

  # Build JAR
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Build application JAR
        run: |
          mvn clean package -Pproduction -DskipTests

      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-admin-jar-${{ steps.version.outputs.version }}
          path: backend/target/*.jar
          retention-days: 30

  # Build and Push Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Set image name for local build
        id: docker_config
        run: |
          echo "image_name=${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "should_push=false" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.docker_config.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ steps.docker_config.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Push to Docker Hub
  push-docker:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && vars.DOCKER_USERNAME != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-jar]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: rabbitmq-admin-jar-${{ steps.version.outputs.version }}
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## RabbitMQ Admin Dashboard ${{ github.ref_name }}

            ### ðŸš€ Deployment Options

            **Docker (Recommended):**
            ```bash
            docker run -d \
              --name rabbitmq-admin \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://your-db:5432/rabbitmq_admin \
              -e SPRING_DATASOURCE_USERNAME=your_user \
              -e SPRING_DATASOURCE_PASSWORD=your_password \
              -e JWT_SECRET_KEY=your-secret-key \
              your-username/rabbitmq-admin:${{ github.ref_name }}
            ```

            **Standalone JAR:**
            Download the JAR file from the assets below and run:
            ```bash
            java -jar rabbitmq-admin-${{ github.ref_name }}.jar
            ```

            ### ðŸ“‹ Requirements
            - Java 21+
            - PostgreSQL 15+
            - Environment variables (see documentation)

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rabbitmq-admin-backend-${{ steps.version.outputs.version }}.jar
          asset_name: rabbitmq-admin-${{ steps.version.outputs.version }}.jar
          asset_content_type: application/java-archive
