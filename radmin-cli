#!/bin/bash

# RabbitMQ Admin CLI
# Unified command-line interface for RabbitMQ Admin

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Project info
PROJECT_NAME="RabbitMQ Admin"
VERSION="0.1.1"

log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

show_banner() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    RabbitMQ Admin CLI                        ║"
    echo "║              Command-line interface for                      ║"
    echo "║            RabbitMQ Admin v${VERSION}                        ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

show_help() {
    show_banner
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo -e "${YELLOW}Commands:${NC}"
    echo ""
    echo -e "${GREEN}Build Commands:${NC}"
    echo "  build jar                 Build standalone JAR file"
    echo "  build docker              Build Docker image"
    echo "  build dev                 Start development environment"
    echo "  build clean               Clean all build artifacts"
    echo "  build test                Run all tests"
    echo ""
    echo -e "${GREEN}Run Commands:${NC}"
    echo "  run jar                   Run JAR (requires external database)"
    echo "  run docker                Run with Docker Compose (includes DB)"
    echo "  run container             Run published Docker image"
    echo ""
    echo -e "${GREEN}Deploy Commands:${NC}"
    echo "  deploy run                Deploy container with external database"
    echo "  deploy stop               Stop running container"
    echo "  deploy logs               View container logs"
    echo "  deploy status             Check container status"
    echo ""
    echo -e "${GREEN}Version Commands:${NC}"
    echo "  version                   Show current version"
    echo "  version set <version>     Set new version across all components"
    echo "  version sync              Sync versions across all components"
    echo ""
    echo -e "${GREEN}Utility Commands:${NC}"
    echo "  help                      Show this help message"
    echo ""
    echo -e "${YELLOW}Build Options:${NC}"
    echo "  --skip-tests              Skip running tests during build"
    echo "  --no-cache                Don't use Docker build cache"
    echo "  --tag TAG                 Docker image tag (default: latest)"
    echo ""
    echo -e "${YELLOW}Deploy Options:${NC}"
    echo "  --image IMAGE             Docker image (default: rabbitmq-admin:latest)"
    echo "  --port PORT               Application port (default: 8080)"
    echo "  --db-url URL              Database URL (required for deploy run)"
    echo "  --db-user USER            Database username (required for deploy run)"
    echo "  --db-pass PASS            Database password (required for deploy run)"
    echo "  --jwt-secret KEY          JWT secret key (required for deploy run)"
    echo "  --name NAME               Container name (default: rabbitmq-admin)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 build jar                              # Build JAR"
    echo "  $0 build docker --tag v1.0.0             # Build Docker image"
    echo "  $0 run docker                             # Start development"
    echo "  $0 deploy run --db-url jdbc:postgresql://db:5432/rabbitmq_admin \\"
    echo "                --db-user admin --db-pass secret --jwt-secret key"
    echo ""
}

sync_versions() {
    log "${BLUE}Syncing versions from main pom.xml...${NC}"
    ./scripts/sync-versions.sh
}

set_version() {
    local NEW_VERSION="$1"
    
    if [ -z "$NEW_VERSION" ]; then
        log "${RED}✗${NC} Error: No version specified"
        echo "Usage: $0 version set <new-version>"
        echo "Example: $0 version set 0.1.6"
        exit 1
    fi
    
    # Validate version format (basic semver check)
    if ! echo "$NEW_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
        log "${RED}✗${NC} Error: Invalid version format. Use semantic versioning (e.g., 0.1.6, 1.0.0-SNAPSHOT)"
        exit 1
    fi
    
    log "${BLUE}Setting version to ${YELLOW}$NEW_VERSION${NC}..."
    echo
    
    # 1. Update root pom.xml (main version)
    log "${CYAN}1. Updating root pom.xml...${NC}"
    if [ -f "pom.xml" ]; then
        # Update project version specifically using line numbers (more reliable)
        # Find the line with project version and update it
        awk -v new_version="$NEW_VERSION" '
        /<groupId>com\.rabbitmq<\/groupId>/ { in_project=1 }
        in_project && /<artifactId>rabbitmq-admin<\/artifactId>/ { next_is_version=1; print; next }
        in_project && next_is_version && /<version>/ { 
            gsub(/<version>[^<]*<\/version>/, "<version>" new_version "</version>")
            next_is_version=0
            in_project=0
        }
        { print }
        ' pom.xml > pom.xml.tmp && mv pom.xml.tmp pom.xml
        echo "   ✓ Root pom.xml updated"
    else
        log "${RED}✗${NC} Error: pom.xml not found"
        exit 1
    fi
    
    # 2. Update backend pom.xml (parent version)
    log "${CYAN}2. Updating backend/pom.xml...${NC}"
    if [ -f "backend/pom.xml" ]; then
        # Update parent version in backend pom
        sed -i.bak "s|<parent>|<parent>|;/<parent>/,/<\/parent>/{s|<version>[^<]*</version>|<version>$NEW_VERSION</version>|;}" backend/pom.xml
        rm -f backend/pom.xml.bak
        echo "   ✓ Backend pom.xml updated"
    else
        log "${YELLOW}⚠${NC} Warning: backend/pom.xml not found"
    fi
    
    # 3. Update frontend pom.xml (parent version)
    log "${CYAN}3. Updating frontend/pom.xml...${NC}"
    if [ -f "frontend/pom.xml" ]; then
        # Update parent version in frontend pom
        sed -i.bak "s|<parent>|<parent>|;/<parent>/,/<\/parent>/{s|<version>[^<]*</version>|<version>$NEW_VERSION</version>|;}" frontend/pom.xml
        rm -f frontend/pom.xml.bak
        echo "   ✓ Frontend pom.xml updated"
    else
        log "${YELLOW}⚠${NC} Warning: frontend/pom.xml not found"
    fi
    
    # 4. Update CLI version
    log "${CYAN}4. Updating CLI version...${NC}"
    # Update only the main VERSION variable near the top of the file (line 18 typically)
    sed -i.bak "1,30s/^VERSION=\".*\"/VERSION=\"$NEW_VERSION\"/" "$0"
    rm -f "${0}.bak"
    echo "   ✓ CLI version updated"
    
    # 5. Update Docker README version
    log "${CYAN}5. Updating README-docker.md version...${NC}"
    if [ -f "README-docker.md" ]; then
        # Update the current version tag in the Available Tags section
        sed -i.bak "s|- \`[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\` - Current version|- \`$NEW_VERSION\` - Current version|" README-docker.md
        rm -f README-docker.md.bak
        echo "   ✓ Docker README version updated"
    else
        log "${YELLOW}⚠${NC} Warning: README-docker.md not found"
    fi
    
    # 6. Sync all other components
    log "${CYAN}6. Syncing versions across all components...${NC}"
    sync_versions
    
    echo
    log "${GREEN}✓ Version successfully updated to $NEW_VERSION${NC}"
    echo
    log "${YELLOW}Next steps:${NC}"
    echo "  1. Review changes: git status"
    echo "  2. Commit changes: git add . && git commit -m \"bump: version $NEW_VERSION\""
    echo "  3. Push and merge to main to trigger automated release"
    echo
}

# Parse command
COMMAND=${1:-help}
SUBCOMMAND=${2:-}

case $COMMAND in
    build)
        case $SUBCOMMAND in
            jar|docker|dev|clean|test)
                sync_versions
                shift 2
                ./scripts/build.sh "$SUBCOMMAND" "$@"
                ;;
            "")
                log "${RED}✗${NC} Build command requires a subcommand"
                echo "Available: jar, docker, dev, clean, test"
                echo "Use '$0 help' for more information"
                exit 1
                ;;
            *)
                log "${RED}✗${NC} Unknown build subcommand: $SUBCOMMAND"
                echo "Available: jar, docker, dev, clean, test"
                exit 1
                ;;
        esac
        ;;
    run)
        case $SUBCOMMAND in
            jar|docker|container)
                shift 2
                ./scripts/run.sh "$SUBCOMMAND" "$@"
                ;;
            "")
                log "${RED}✗${NC} Run command requires a subcommand"
                echo "Available: jar, docker, container"
                echo "Use '$0 help' for more information"
                exit 1
                ;;
            *)
                log "${RED}✗${NC} Unknown run subcommand: $SUBCOMMAND"
                echo "Available: jar, docker, container"
                exit 1
                ;;
        esac
        ;;
    deploy)
        case $SUBCOMMAND in
            run|stop|logs|status)
                shift 2
                ./scripts/deploy.sh "$SUBCOMMAND" "$@"
                ;;
            "")
                log "${RED}✗${NC} Deploy command requires a subcommand"
                echo "Available: run, stop, logs, status"
                echo "Use '$0 help' for more information"
                exit 1
                ;;
            *)
                log "${RED}✗${NC} Unknown deploy subcommand: $SUBCOMMAND"
                echo "Available: run, stop, logs, status"
                exit 1
                ;;
        esac
        ;;
    version)
        case $SUBCOMMAND in
            set)
                set_version "$3"
                ;;
            sync)
                sync_versions
                ;;
            ""|show)
                echo -e "${GREEN}RabbitMQ Admin${NC}"
                echo "Version: $VERSION"
                echo ""
                # Try to get version from pom.xml
                if command -v mvn &> /dev/null; then
                    POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "unknown")
                    echo "POM Version: $POM_VERSION"
                fi
                ;;
            *)
                log "${RED}✗${NC} Unknown version subcommand: $SUBCOMMAND"
                echo "Available: set <version>, sync, show (default)"
                exit 1
                ;;
        esac
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        log "${RED}✗${NC} Unknown command: $COMMAND"
        echo ""
        echo "Available commands: build, run, deploy, version, help"
        echo "Use '$0 help' for more information"
        exit 1
        ;;
esac